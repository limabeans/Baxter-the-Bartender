// Generated by gencpp from file cup_grabber/MultiARPoseResponse.msg
// DO NOT EDIT!


#ifndef CUP_GRABBER_MESSAGE_MULTIARPOSERESPONSE_H
#define CUP_GRABBER_MESSAGE_MULTIARPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cup_grabber
{
template <class ContainerAllocator>
struct MultiARPoseResponse_
{
  typedef MultiARPoseResponse_<ContainerAllocator> Type;

  MultiARPoseResponse_()
    : tag1()
    , pos_x1(0.0)
    , pos_y1(0.0)
    , pos_z1(0.0)
    , or_x1(0.0)
    , or_y1(0.0)
    , or_z1(0.0)
    , or_w1(0.0)
    , tag2()
    , pos_x2(0.0)
    , pos_y2(0.0)
    , pos_z2(0.0)
    , or_x2(0.0)
    , or_y2(0.0)
    , or_z2(0.0)
    , or_w2(0.0)
    , tag3()
    , pos_x3(0.0)
    , pos_y3(0.0)
    , pos_z3(0.0)
    , or_x3(0.0)
    , or_y3(0.0)
    , or_z3(0.0)
    , or_w3(0.0)
    , tag4()
    , pos_x4(0.0)
    , pos_y4(0.0)
    , pos_z4(0.0)
    , or_x4(0.0)
    , or_y4(0.0)
    , or_z4(0.0)
    , or_w4(0.0)  {
    }
  MultiARPoseResponse_(const ContainerAllocator& _alloc)
    : tag1(_alloc)
    , pos_x1(0.0)
    , pos_y1(0.0)
    , pos_z1(0.0)
    , or_x1(0.0)
    , or_y1(0.0)
    , or_z1(0.0)
    , or_w1(0.0)
    , tag2(_alloc)
    , pos_x2(0.0)
    , pos_y2(0.0)
    , pos_z2(0.0)
    , or_x2(0.0)
    , or_y2(0.0)
    , or_z2(0.0)
    , or_w2(0.0)
    , tag3(_alloc)
    , pos_x3(0.0)
    , pos_y3(0.0)
    , pos_z3(0.0)
    , or_x3(0.0)
    , or_y3(0.0)
    , or_z3(0.0)
    , or_w3(0.0)
    , tag4(_alloc)
    , pos_x4(0.0)
    , pos_y4(0.0)
    , pos_z4(0.0)
    , or_x4(0.0)
    , or_y4(0.0)
    , or_z4(0.0)
    , or_w4(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag1_type;
  _tag1_type tag1;

   typedef double _pos_x1_type;
  _pos_x1_type pos_x1;

   typedef double _pos_y1_type;
  _pos_y1_type pos_y1;

   typedef double _pos_z1_type;
  _pos_z1_type pos_z1;

   typedef double _or_x1_type;
  _or_x1_type or_x1;

   typedef double _or_y1_type;
  _or_y1_type or_y1;

   typedef double _or_z1_type;
  _or_z1_type or_z1;

   typedef double _or_w1_type;
  _or_w1_type or_w1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag2_type;
  _tag2_type tag2;

   typedef double _pos_x2_type;
  _pos_x2_type pos_x2;

   typedef double _pos_y2_type;
  _pos_y2_type pos_y2;

   typedef double _pos_z2_type;
  _pos_z2_type pos_z2;

   typedef double _or_x2_type;
  _or_x2_type or_x2;

   typedef double _or_y2_type;
  _or_y2_type or_y2;

   typedef double _or_z2_type;
  _or_z2_type or_z2;

   typedef double _or_w2_type;
  _or_w2_type or_w2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag3_type;
  _tag3_type tag3;

   typedef double _pos_x3_type;
  _pos_x3_type pos_x3;

   typedef double _pos_y3_type;
  _pos_y3_type pos_y3;

   typedef double _pos_z3_type;
  _pos_z3_type pos_z3;

   typedef double _or_x3_type;
  _or_x3_type or_x3;

   typedef double _or_y3_type;
  _or_y3_type or_y3;

   typedef double _or_z3_type;
  _or_z3_type or_z3;

   typedef double _or_w3_type;
  _or_w3_type or_w3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag4_type;
  _tag4_type tag4;

   typedef double _pos_x4_type;
  _pos_x4_type pos_x4;

   typedef double _pos_y4_type;
  _pos_y4_type pos_y4;

   typedef double _pos_z4_type;
  _pos_z4_type pos_z4;

   typedef double _or_x4_type;
  _or_x4_type or_x4;

   typedef double _or_y4_type;
  _or_y4_type or_y4;

   typedef double _or_z4_type;
  _or_z4_type or_z4;

   typedef double _or_w4_type;
  _or_w4_type or_w4;




  typedef boost::shared_ptr< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MultiARPoseResponse_

typedef ::cup_grabber::MultiARPoseResponse_<std::allocator<void> > MultiARPoseResponse;

typedef boost::shared_ptr< ::cup_grabber::MultiARPoseResponse > MultiARPoseResponsePtr;
typedef boost::shared_ptr< ::cup_grabber::MultiARPoseResponse const> MultiARPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cup_grabber

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e57c6af3767990e7d901ffab9a7321a";
  }

  static const char* value(const ::cup_grabber::MultiARPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e57c6af3767990eULL;
  static const uint64_t static_value2 = 0x7d901ffab9a7321aULL;
};

template<class ContainerAllocator>
struct DataType< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cup_grabber/MultiARPoseResponse";
  }

  static const char* value(const ::cup_grabber::MultiARPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tag1\n\
float64 pos_x1\n\
float64 pos_y1\n\
float64 pos_z1\n\
float64 or_x1\n\
float64 or_y1\n\
float64 or_z1\n\
float64 or_w1\n\
string tag2\n\
float64 pos_x2\n\
float64 pos_y2\n\
float64 pos_z2\n\
float64 or_x2\n\
float64 or_y2\n\
float64 or_z2\n\
float64 or_w2\n\
string tag3\n\
float64 pos_x3\n\
float64 pos_y3\n\
float64 pos_z3\n\
float64 or_x3\n\
float64 or_y3\n\
float64 or_z3\n\
float64 or_w3\n\
string tag4\n\
float64 pos_x4\n\
float64 pos_y4\n\
float64 pos_z4\n\
float64 or_x4\n\
float64 or_y4\n\
float64 or_z4\n\
float64 or_w4\n\
";
  }

  static const char* value(const ::cup_grabber::MultiARPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag1);
      stream.next(m.pos_x1);
      stream.next(m.pos_y1);
      stream.next(m.pos_z1);
      stream.next(m.or_x1);
      stream.next(m.or_y1);
      stream.next(m.or_z1);
      stream.next(m.or_w1);
      stream.next(m.tag2);
      stream.next(m.pos_x2);
      stream.next(m.pos_y2);
      stream.next(m.pos_z2);
      stream.next(m.or_x2);
      stream.next(m.or_y2);
      stream.next(m.or_z2);
      stream.next(m.or_w2);
      stream.next(m.tag3);
      stream.next(m.pos_x3);
      stream.next(m.pos_y3);
      stream.next(m.pos_z3);
      stream.next(m.or_x3);
      stream.next(m.or_y3);
      stream.next(m.or_z3);
      stream.next(m.or_w3);
      stream.next(m.tag4);
      stream.next(m.pos_x4);
      stream.next(m.pos_y4);
      stream.next(m.pos_z4);
      stream.next(m.or_x4);
      stream.next(m.or_y4);
      stream.next(m.or_z4);
      stream.next(m.or_w4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiARPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cup_grabber::MultiARPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cup_grabber::MultiARPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "tag1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag1);
    s << indent << "pos_x1: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x1);
    s << indent << "pos_y1: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y1);
    s << indent << "pos_z1: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z1);
    s << indent << "or_x1: ";
    Printer<double>::stream(s, indent + "  ", v.or_x1);
    s << indent << "or_y1: ";
    Printer<double>::stream(s, indent + "  ", v.or_y1);
    s << indent << "or_z1: ";
    Printer<double>::stream(s, indent + "  ", v.or_z1);
    s << indent << "or_w1: ";
    Printer<double>::stream(s, indent + "  ", v.or_w1);
    s << indent << "tag2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag2);
    s << indent << "pos_x2: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x2);
    s << indent << "pos_y2: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y2);
    s << indent << "pos_z2: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z2);
    s << indent << "or_x2: ";
    Printer<double>::stream(s, indent + "  ", v.or_x2);
    s << indent << "or_y2: ";
    Printer<double>::stream(s, indent + "  ", v.or_y2);
    s << indent << "or_z2: ";
    Printer<double>::stream(s, indent + "  ", v.or_z2);
    s << indent << "or_w2: ";
    Printer<double>::stream(s, indent + "  ", v.or_w2);
    s << indent << "tag3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag3);
    s << indent << "pos_x3: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x3);
    s << indent << "pos_y3: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y3);
    s << indent << "pos_z3: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z3);
    s << indent << "or_x3: ";
    Printer<double>::stream(s, indent + "  ", v.or_x3);
    s << indent << "or_y3: ";
    Printer<double>::stream(s, indent + "  ", v.or_y3);
    s << indent << "or_z3: ";
    Printer<double>::stream(s, indent + "  ", v.or_z3);
    s << indent << "or_w3: ";
    Printer<double>::stream(s, indent + "  ", v.or_w3);
    s << indent << "tag4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag4);
    s << indent << "pos_x4: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x4);
    s << indent << "pos_y4: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y4);
    s << indent << "pos_z4: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z4);
    s << indent << "or_x4: ";
    Printer<double>::stream(s, indent + "  ", v.or_x4);
    s << indent << "or_y4: ";
    Printer<double>::stream(s, indent + "  ", v.or_y4);
    s << indent << "or_z4: ";
    Printer<double>::stream(s, indent + "  ", v.or_z4);
    s << indent << "or_w4: ";
    Printer<double>::stream(s, indent + "  ", v.or_w4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUP_GRABBER_MESSAGE_MULTIARPOSERESPONSE_H
