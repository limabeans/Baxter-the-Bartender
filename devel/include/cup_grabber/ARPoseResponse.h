// Generated by gencpp from file cup_grabber/ARPoseResponse.msg
// DO NOT EDIT!


#ifndef CUP_GRABBER_MESSAGE_ARPOSERESPONSE_H
#define CUP_GRABBER_MESSAGE_ARPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cup_grabber
{
template <class ContainerAllocator>
struct ARPoseResponse_
{
  typedef ARPoseResponse_<ContainerAllocator> Type;

  ARPoseResponse_()
    : tag_name()
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , or_x(0.0)
    , or_y(0.0)
    , or_z(0.0)
    , or_w(0.0)  {
    }
  ARPoseResponse_(const ContainerAllocator& _alloc)
    : tag_name(_alloc)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , or_x(0.0)
    , or_y(0.0)
    , or_z(0.0)
    , or_w(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag_name_type;
  _tag_name_type tag_name;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;

   typedef double _or_x_type;
  _or_x_type or_x;

   typedef double _or_y_type;
  _or_y_type or_y;

   typedef double _or_z_type;
  _or_z_type or_z;

   typedef double _or_w_type;
  _or_w_type or_w;




  typedef boost::shared_ptr< ::cup_grabber::ARPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cup_grabber::ARPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ARPoseResponse_

typedef ::cup_grabber::ARPoseResponse_<std::allocator<void> > ARPoseResponse;

typedef boost::shared_ptr< ::cup_grabber::ARPoseResponse > ARPoseResponsePtr;
typedef boost::shared_ptr< ::cup_grabber::ARPoseResponse const> ARPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cup_grabber::ARPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cup_grabber

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cup_grabber::ARPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_grabber::ARPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_grabber::ARPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cad884cd8d91f16aeab93de327ae91a";
  }

  static const char* value(const ::cup_grabber::ARPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cad884cd8d91f16ULL;
  static const uint64_t static_value2 = 0xaeab93de327ae91aULL;
};

template<class ContainerAllocator>
struct DataType< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cup_grabber/ARPoseResponse";
  }

  static const char* value(const ::cup_grabber::ARPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tag_name\n\
float64 pos_x\n\
float64 pos_y\n\
float64 pos_z\n\
float64 or_x\n\
float64 or_y\n\
float64 or_z\n\
float64 or_w\n\
\n\
\n\
";
  }

  static const char* value(const ::cup_grabber::ARPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_name);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.or_x);
      stream.next(m.or_y);
      stream.next(m.or_z);
      stream.next(m.or_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ARPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cup_grabber::ARPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cup_grabber::ARPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "tag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag_name);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
    s << indent << "or_x: ";
    Printer<double>::stream(s, indent + "  ", v.or_x);
    s << indent << "or_y: ";
    Printer<double>::stream(s, indent + "  ", v.or_y);
    s << indent << "or_z: ";
    Printer<double>::stream(s, indent + "  ", v.or_z);
    s << indent << "or_w: ";
    Printer<double>::stream(s, indent + "  ", v.or_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUP_GRABBER_MESSAGE_ARPOSERESPONSE_H
